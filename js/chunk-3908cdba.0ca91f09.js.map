{"version":3,"sources":["webpack:///./src/views/locations/show.vue?cf22","webpack:///src/views/locations/show.vue","webpack:///./src/views/locations/show.vue?962c","webpack:///./src/views/locations/show.vue?6dff","webpack:///./src/views/locations/show.vue?5faf"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","_m","attrs","model","value","callback","$$v","expression","staticRenderFns","staticStyle","component"],"mappings":"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","file":"js/chunk-3908cdba.0ca91f09.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"row pb-5\"},[_c('div',{staticClass:\"col-6 pt-5\"},[_c('h2',{staticClass:\"my-5 mx-auto text-center\"},[_vm._v(\"Physical Quantity Normal\")]),_vm._m(0),_c('div',{staticClass:\"d-flex mt-5\"},[_c('vue-numeric-input',{staticClass:\"input mx-auto\",attrs:{\"size\":\"250px\",\"min\":1,\"max\":10,\"step\":2,\"autofocus\":\"\"},model:{value:(_vm.value),callback:function ($$v) {_vm.value=$$v},expression:\"value\"}})],1)]),_c('div',{staticClass:\"col-6 pt-5\"},[_c('h2',{staticClass:\"my-5 mx-auto text-center\"},[_vm._v(\"Physical Quantity Danger\")]),_vm._m(1),_c('div',{staticClass:\"d-flex mt-5\"},[_c('vue-numeric-input',{staticClass:\"input mx-auto\",attrs:{\"size\":\"250px\",\"min\":1,\"max\":10,\"step\":2,\"autofocus\":\"\"},model:{value:(_vm.value),callback:function ($$v) {_vm.value=$$v},expression:\"value\"}})],1)])]),_c('div',{staticClass:\"row pt-5\"},[_c('div',{staticClass:\"col-6 pt-5\"},[_c('h2',{staticClass:\"my-5 mx-auto text-center\"},[_vm._v(\"Physical Quantity Danger\")]),_vm._m(2),_c('div',{staticClass:\"d-flex mt-5\"},[_c('vue-numeric-input',{staticClass:\"input mx-auto\",attrs:{\"size\":\"250px\",\"min\":1,\"max\":10,\"step\":2,\"autofocus\":\"\"},model:{value:(_vm.value),callback:function ($$v) {_vm.value=$$v},expression:\"value\"}})],1)]),_c('div',{staticClass:\"col-6 pt-5\"},[_c('h2',{staticClass:\"my-5 mx-auto text-center\"},[_vm._v(\"Physical Quantity Normal\")]),_vm._m(3),_c('div',{staticClass:\"d-flex mt-5\"},[_c('vue-numeric-input',{staticClass:\"input mx-auto\",attrs:{\"size\":\"250px\",\"min\":1,\"max\":10,\"step\":2,\"autofocus\":\"\"},model:{value:(_vm.value),callback:function ($$v) {_vm.value=$$v},expression:\"value\"}})],1)])])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"d-flex justify-content-center\"},[_c('div',{staticClass:\"mx-auto\",staticStyle:{\"width\":\"300px\",\"height\":\"180px\",\"position\":\"relative\",\"background\":\"#000 no-repeat top left\",\"border\":\"3px solid #999\",\"border-radius\":\"10px\"}},[_c('div',{staticStyle:{\"position\":\"absolute\",\"left\":\"20px\",\"top\":\"20px\",\"width\":\"260px\",\"height\":\"140px\"}},[_c('canvas',{attrs:{\"id\":\"display\",\"width\":\"260\",\"height\":\"140\"}})])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"d-flex justify-content-center\"},[_c('div',{staticClass:\"mx-auto\",staticStyle:{\"width\":\"300px\",\"height\":\"180px\",\"position\":\"relative\",\"background\":\"#000 no-repeat top left\",\"border\":\"3px solid #999\",\"border-radius\":\"10px\"}},[_c('div',{staticStyle:{\"position\":\"absolute\",\"left\":\"20px\",\"top\":\"20px\",\"width\":\"260px\",\"height\":\"140px\"}},[_c('canvas',{attrs:{\"id\":\"display2\",\"width\":\"260\",\"height\":\"140\"}})])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"d-flex justify-content-center\"},[_c('div',{staticClass:\"mx-auto\",staticStyle:{\"width\":\"300px\",\"height\":\"180px\",\"position\":\"relative\",\"background\":\"#000 no-repeat top left\",\"border\":\"3px solid #999\",\"border-radius\":\"10px\"}},[_c('div',{staticStyle:{\"position\":\"absolute\",\"left\":\"20px\",\"top\":\"20px\",\"width\":\"260px\",\"height\":\"140px\"}},[_c('canvas',{attrs:{\"id\":\"display3\",\"width\":\"260\",\"height\":\"140\"}})])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"d-flex justify-content-center\"},[_c('div',{staticClass:\"mx-auto\",staticStyle:{\"width\":\"300px\",\"height\":\"180px\",\"position\":\"relative\",\"background\":\"#000 no-repeat top left\",\"border\":\"3px solid #999\",\"border-radius\":\"10px\"}},[_c('div',{staticStyle:{\"position\":\"absolute\",\"left\":\"20px\",\"top\":\"20px\",\"width\":\"260px\",\"height\":\"140px\"}},[_c('canvas',{attrs:{\"id\":\"display4\",\"width\":\"260\",\"height\":\"140\"}})])])])}]\n\nexport { render, staticRenderFns }","<template>\r\n<div class=\"container\">\r\n      <div class=\"row pb-5\">\r\n        <div class=\"col-6 pt-5\">\r\n          <h2 class=\"my-5 mx-auto text-center\">Physical Quantity Normal</h2>\r\n          <div class=\"d-flex justify-content-center\">\r\n            <div class=\"mx-auto\" style=\"width: 300px; height: 180px; position: relative; background: #000 no-repeat top left; border: 3px solid #999; border-radius: 10px;\">\r\n              <div style=\"position: absolute; left: 20px; top: 20px; width: 260px; height: 140px\">\r\n                <canvas id=\"display\" width=\"260\" height=\"140\"></canvas>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"d-flex mt-5\">\r\n            <vue-numeric-input class=\"input mx-auto\" v-model=\"value\" size=\"250px\" :min=\"1\" :max=\"10\" :step=\"2\" autofocus></vue-numeric-input>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-6 pt-5\">\r\n          <h2 class=\"my-5 mx-auto text-center\" >Physical Quantity Danger</h2>\r\n          <div class=\"d-flex justify-content-center\">\r\n            <div class=\"mx-auto\" style=\"width: 300px; height: 180px; position: relative; background: #000 no-repeat top left; border: 3px solid #999; border-radius: 10px;\">\r\n              <div style=\"position: absolute; left: 20px; top: 20px; width: 260px; height: 140px\">\r\n                <canvas id=\"display2\" width=\"260\" height=\"140\"></canvas>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"d-flex mt-5\">\r\n            <vue-numeric-input class=\"input mx-auto\" v-model=\"value\" size=\"250px\" :min=\"1\" :max=\"10\" :step=\"2\" autofocus></vue-numeric-input>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row pt-5\">\r\n        <div class=\"col-6 pt-5\">\r\n          <h2 class=\"my-5 mx-auto text-center\" >Physical Quantity Danger</h2>\r\n          <div class=\"d-flex justify-content-center\">\r\n            <div class=\"mx-auto\" style=\"width: 300px; height: 180px; position: relative; background: #000 no-repeat top left; border: 3px solid #999; border-radius: 10px;\">\r\n              <div style=\"position: absolute; left: 20px; top: 20px; width: 260px; height: 140px\">\r\n                <canvas id=\"display3\" width=\"260\" height=\"140\"></canvas>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"d-flex mt-5\">\r\n            <vue-numeric-input class=\"input mx-auto\" v-model=\"value\" size=\"250px\" :min=\"1\" :max=\"10\" :step=\"2\" autofocus></vue-numeric-input>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-6 pt-5\">\r\n          <h2 class=\"my-5 mx-auto text-center\" >Physical Quantity Normal</h2>\r\n          <div class=\"d-flex justify-content-center\">\r\n            <div class=\"mx-auto\" style=\"width: 300px; height: 180px; position: relative; background: #000 no-repeat top left; border: 3px solid #999; border-radius: 10px;\">\r\n              <div style=\"position: absolute; left: 20px; top: 20px; width: 260px; height: 140px\">\r\n                <canvas id=\"display4\" width=\"260\" height=\"140\"></canvas>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"d-flex mt-5\">\r\n            <vue-numeric-input class=\"input mx-auto\" v-model=\"value\" size=\"250px\" :min=\"1\" :max=\"10\" :step=\"2\" autofocus></vue-numeric-input>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\n    export default {\r\n      data() {\r\n        return {\r\n          value: 1,\r\n        };\r\n      },\r\n      mounted() {\r\n          // Segment display types\r\n          SegmentDisplay.SevenSegment    = 7;\r\n          SegmentDisplay.FourteenSegment = 14;\r\n          SegmentDisplay.SixteenSegment  = 16;\r\n\r\n          // Segment corner types\r\n          SegmentDisplay.SymmetricCorner = 0;\r\n          SegmentDisplay.SquaredCorner   = 1;\r\n          SegmentDisplay.RoundedCorner   = 2;\r\n\r\n\r\n          function SegmentDisplay(displayId) {\r\n            this.displayId       = displayId;\r\n            this.pattern         = '##:##:##';\r\n            this.value           = '12:34:56';\r\n            this.digitHeight     = 20;\r\n            this.digitWidth      = 10;\r\n            this.digitDistance   = 2.5;\r\n            this.displayAngle    = 12;\r\n            this.segmentWidth    = 2.5;\r\n            this.segmentDistance = 0.2;\r\n            this.segmentCount    = SegmentDisplay.SevenSegment;\r\n            this.cornerType      = SegmentDisplay.RoundedCorner;\r\n            this.colorOn         = 'rgb(233, 93, 15)';\r\n            this.colorOff        = 'rgb(75, 30, 5)';\r\n          };\r\n\r\n          SegmentDisplay.prototype.setValue = function(value) {\r\n            this.value = value;\r\n            this.draw();\r\n          };\r\n\r\n          SegmentDisplay.prototype.draw = function() {\r\n            var display = document.getElementById(this.displayId);\r\n            if (display) {\r\n              var context = display.getContext('2d');\r\n              if (context) {\r\n                // clear canvas\r\n                context.clearRect(0, 0, display.width, display.height);\r\n                \r\n                // compute and check display width\r\n                var width = 0;\r\n                var first = true;\r\n                if (this.pattern) {\r\n                  for (var i = 0; i < this.pattern.length; i++) {\r\n                    var c = this.pattern.charAt(i).toLowerCase();\r\n                    if (c == '#') {\r\n                      width += this.digitWidth;\r\n                    } else if (c == '.' || c == ':') {\r\n                      width += this.segmentWidth;\r\n                    } else if (c != ' ') {\r\n                      return;\r\n                    }\r\n                    width += first ? 0 : this.digitDistance;\r\n                    first = false;\r\n                  }\r\n                }\r\n                if (width <= 0) {\r\n                  return;\r\n                }\r\n                \r\n                // compute skew factor\r\n                var angle = -1.0 * Math.max(-45.0, Math.min(45.0, this.displayAngle));\r\n                var skew  = Math.tan((angle * Math.PI) / 180.0);\r\n                \r\n                // compute scale factor\r\n                var scale = Math.min(display.width / (width + Math.abs(skew * this.digitHeight)), display.height / this.digitHeight);\r\n                \r\n                // compute display offset\r\n                var offsetX = (display.width - (width + skew * this.digitHeight) * scale) / 2.0;\r\n                var offsetY = (display.height - this.digitHeight * scale) / 2.0;\r\n                \r\n                // context transformation\r\n                context.save();\r\n                context.translate(offsetX, offsetY);\r\n                context.scale(scale, scale);\r\n                context.transform(1, 0, skew, 1, 0, 0);\r\n\r\n                // draw segments\r\n                var xPos = 0;\r\n                var size = (this.value) ? this.value.length : 0;\r\n                for (var i = 0; i < this.pattern.length; i++) {\r\n                  var mask  = this.pattern.charAt(i);\r\n                  var value = (i < size) ? this.value.charAt(i).toLowerCase() : ' ';\r\n                  xPos += this.drawDigit(context, xPos, mask, value);\r\n                }\r\n\r\n                // finish drawing\r\n                context.restore();\r\n              }\r\n            }\r\n          };\r\n\r\n          SegmentDisplay.prototype.drawDigit = function(context, xPos, mask, c) {\r\n            switch (mask) {\r\n              case '#':\r\n                var r = Math.sqrt(this.segmentWidth * this.segmentWidth / 2.0);\r\n                var d = Math.sqrt(this.segmentDistance * this.segmentDistance / 2.0);\r\n                var e = d / 2.0; \r\n                var f = (this.segmentWidth - d) * Math.sin((45.0 * Math.PI) / 180.0);\r\n                var g = f / 2.0;\r\n                var h = (this.digitHeight - 3.0 * this.segmentWidth) / 2.0;\r\n                var w = (this.digitWidth - 3.0 * this.segmentWidth) / 2.0;\r\n                var s = this.segmentWidth / 2.0;\r\n                var t = this.digitWidth / 2.0;\r\n\r\n                // draw segment a (a1 and a2 for 16 segments)\r\n                if (this.segmentCount == 16) {\r\n                  var x = xPos;\r\n                  var y = 0;\r\n                  context.fillStyle = this.getSegmentColor(c, null, '02356789abcdefgiopqrstz@%');\r\n                  context.beginPath();\r\n                  switch (this.cornerType) {\r\n                    case SegmentDisplay.SymmetricCorner:\r\n                      context.moveTo(x + s + d, y + s);\r\n                      context.lineTo(x + this.segmentWidth + d, y);\r\n                      break;\r\n                    case SegmentDisplay.SquaredCorner:\r\n                      context.moveTo(x + s + e, y + s - e);\r\n                      context.lineTo(x + this.segmentWidth, y);\r\n                      break;\r\n                    default:\r\n                      context.moveTo(x + this.segmentWidth - f, y + this.segmentWidth - f - d);\r\n                      context.quadraticCurveTo(x + this.segmentWidth - g, y, x + this.segmentWidth, y);\r\n                  }\r\n                  context.lineTo(x + t - d - s, y);\r\n                  context.lineTo(x + t - d, y + s);\r\n                  context.lineTo(x + t - d - s, y + this.segmentWidth);\r\n                  context.lineTo(x + this.segmentWidth + d, y + this.segmentWidth);\r\n                  context.fill();\r\n                  \r\n                  var x = xPos;\r\n                  var y = 0;\r\n                  context.fillStyle = this.getSegmentColor(c, null, '02356789abcdefgiopqrstz@');\r\n                  context.beginPath();\r\n                  context.moveTo(x + this.digitWidth - this.segmentWidth - d, y + this.segmentWidth);\r\n                  context.lineTo(x + t + d + s, y + this.segmentWidth);\r\n                  context.lineTo(x + t + d, y + s);\r\n                  context.lineTo(x + t + d + s, y);\r\n                  switch (this.cornerType) {\r\n                    case SegmentDisplay.SymmetricCorner:\r\n                      context.lineTo(x + this.digitWidth - this.segmentWidth - d, y);\r\n                      context.lineTo(x + this.digitWidth - s - d, y + s);\r\n                      break;\r\n                    case SegmentDisplay.SquaredCorner:\r\n                      context.lineTo(x + this.digitWidth - this.segmentWidth, y);\r\n                      context.lineTo(x + this.digitWidth - s - e, y + s - e);\r\n                      break;\r\n                    default:\r\n                      context.lineTo(x + this.digitWidth - this.segmentWidth, y);\r\n                      context.quadraticCurveTo(x + this.digitWidth - this.segmentWidth + g, y, x + this.digitWidth - this.segmentWidth + f, y + this.segmentWidth - f - d);\r\n                  }\r\n                  context.fill();\r\n                  \r\n                } else {\r\n                  var x = xPos;\r\n                  var y = 0;\r\n                  context.fillStyle = this.getSegmentColor(c, '02356789acefp', '02356789abcdefgiopqrstz@');\r\n                  context.beginPath();\r\n                  switch (this.cornerType) {\r\n                    case SegmentDisplay.SymmetricCorner:\r\n                      context.moveTo(x + s + d, y + s);\r\n                      context.lineTo(x + this.segmentWidth + d, y);\r\n                      context.lineTo(x + this.digitWidth - this.segmentWidth - d, y);\r\n                      context.lineTo(x + this.digitWidth - s - d, y + s);\r\n                      break;\r\n                    case SegmentDisplay.SquaredCorner:\r\n                      context.moveTo(x + s + e, y + s - e);\r\n                      context.lineTo(x + this.segmentWidth, y);\r\n                      context.lineTo(x + this.digitWidth - this.segmentWidth, y);\r\n                      context.lineTo(x + this.digitWidth - s - e, y + s - e);\r\n                      break;\r\n                    default:\r\n                      context.moveTo(x + this.segmentWidth - f, y + this.segmentWidth - f - d);\r\n                      context.quadraticCurveTo(x + this.segmentWidth - g, y, x + this.segmentWidth, y);\r\n                      context.lineTo(x + this.digitWidth - this.segmentWidth, y);\r\n                      context.quadraticCurveTo(x + this.digitWidth - this.segmentWidth + g, y, x + this.digitWidth - this.segmentWidth + f, y + this.segmentWidth - f - d);\r\n                  }\r\n                  context.lineTo(x + this.digitWidth - this.segmentWidth - d, y + this.segmentWidth);\r\n                  context.lineTo(x + this.segmentWidth + d, y + this.segmentWidth);\r\n                  context.fill();\r\n                }\r\n                \r\n                // draw segment b\r\n                x = xPos + this.digitWidth - this.segmentWidth;\r\n                y = 0;\r\n                context.fillStyle = this.getSegmentColor(c, '01234789adhpy', '01234789abdhjmnopqruwy');\r\n                context.beginPath();\r\n                switch (this.cornerType) {\r\n                  case SegmentDisplay.SymmetricCorner:\r\n                    context.moveTo(x + s, y + s + d);\r\n                    context.lineTo(x + this.segmentWidth, y + this.segmentWidth + d);\r\n                    break;\r\n                  case SegmentDisplay.SquaredCorner:\r\n                    context.moveTo(x + s + e, y + s + e);\r\n                    context.lineTo(x + this.segmentWidth, y + this.segmentWidth);\r\n                    break;\r\n                  default:\r\n                    context.moveTo(x + f + d, y + this.segmentWidth - f);\r\n                    context.quadraticCurveTo(x + this.segmentWidth, y + this.segmentWidth - g, x + this.segmentWidth, y + this.segmentWidth);\r\n                }\r\n                context.lineTo(x + this.segmentWidth, y + h + this.segmentWidth - d);\r\n                context.lineTo(x + s, y + h + this.segmentWidth + s - d);\r\n                context.lineTo(x, y + h + this.segmentWidth - d);\r\n                context.lineTo(x, y + this.segmentWidth + d);\r\n                context.fill();\r\n                \r\n                // draw segment c\r\n                x = xPos + this.digitWidth - this.segmentWidth;\r\n                y = h + this.segmentWidth;\r\n                context.fillStyle = this.getSegmentColor(c, '013456789abdhnouy', '01346789abdghjmnoqsuw@', '%');\r\n                context.beginPath();\r\n                context.moveTo(x, y + this.segmentWidth + d);\r\n                context.lineTo(x + s, y + s + d);\r\n                context.lineTo(x + this.segmentWidth, y + this.segmentWidth + d);\r\n                context.lineTo(x + this.segmentWidth, y + h + this.segmentWidth - d);\r\n                switch (this.cornerType) {\r\n                  case SegmentDisplay.SymmetricCorner:\r\n                    context.lineTo(x + s, y + h + this.segmentWidth + s - d);\r\n                    context.lineTo(x, y + h + this.segmentWidth - d);\r\n                    break;\r\n                  case SegmentDisplay.SquaredCorner:\r\n                    context.lineTo(x + s + e, y + h + this.segmentWidth + s - e);\r\n                    context.lineTo(x, y + h + this.segmentWidth - d);\r\n                    break;\r\n                  default:\r\n                    context.quadraticCurveTo(x + this.segmentWidth, y + h + this.segmentWidth + g, x + f + d, y + h + this.segmentWidth + f); //\r\n                    context.lineTo(x, y + h + this.segmentWidth - d);\r\n                }\r\n                context.fill();\r\n                \r\n                // draw segment d (d1 and d2 for 16 segments)\r\n                if (this.segmentCount == 16) {\r\n                  x = xPos;\r\n                  y = this.digitHeight - this.segmentWidth;\r\n                  context.fillStyle = this.getSegmentColor(c, null, '0235689bcdegijloqsuz_=@');\r\n                  context.beginPath();\r\n                  context.moveTo(x + this.segmentWidth + d, y);\r\n                  context.lineTo(x + t - d - s, y);\r\n                  context.lineTo(x + t - d, y + s);\r\n                  context.lineTo(x + t - d - s, y + this.segmentWidth);\r\n                  switch (this.cornerType) {\r\n                    case SegmentDisplay.SymmetricCorner:\r\n                      context.lineTo(x + this.segmentWidth + d, y + this.segmentWidth);\r\n                      context.lineTo(x + s + d, y + s);\r\n                      break;\r\n                    case SegmentDisplay.SquaredCorner:\r\n                      context.lineTo(x + this.segmentWidth, y + this.segmentWidth);\r\n                      context.lineTo(x + s + e, y + s + e);\r\n                      break;\r\n                    default:\r\n                      context.lineTo(x + this.segmentWidth, y + this.segmentWidth);\r\n                      context.quadraticCurveTo(x + this.segmentWidth - g, y + this.segmentWidth, x + this.segmentWidth - f, y + f + d);\r\n                      context.lineTo(x + this.segmentWidth - f, y + f + d);\r\n                  }\r\n                  context.fill();\r\n\r\n                  x = xPos;\r\n                  y = this.digitHeight - this.segmentWidth;\r\n                  context.fillStyle = this.getSegmentColor(c, null, '0235689bcdegijloqsuz_=@', '%');\r\n                  context.beginPath();\r\n                  context.moveTo(x + t + d + s, y + this.segmentWidth);\r\n                  context.lineTo(x + t + d, y + s);\r\n                  context.lineTo(x + t + d + s, y);\r\n                  context.lineTo(x + this.digitWidth - this.segmentWidth - d, y);\r\n                  switch (this.cornerType) {\r\n                    case SegmentDisplay.SymmetricCorner:\r\n                      context.lineTo(x + this.digitWidth - s - d, y + s);\r\n                      context.lineTo(x + this.digitWidth - this.segmentWidth - d, y + this.segmentWidth);\r\n                      break;\r\n                    case SegmentDisplay.SquaredCorner:\r\n                      context.lineTo(x + this.digitWidth - s - e, y + s + e);\r\n                      context.lineTo(x + this.digitWidth - this.segmentWidth, y + this.segmentWidth);\r\n                      break;\r\n                    default:\r\n                      context.lineTo(x + this.digitWidth - this.segmentWidth + f, y + f + d);\r\n                      context.quadraticCurveTo(x + this.digitWidth - this.segmentWidth + g, y + this.segmentWidth, x + this.digitWidth - this.segmentWidth, y + this.segmentWidth);\r\n                  }\r\n                  context.fill();\r\n                }\r\n                else {\r\n                  x = xPos;\r\n                  y = this.digitHeight - this.segmentWidth;\r\n                  context.fillStyle = this.getSegmentColor(c, '0235689bcdelotuy_', '0235689bcdegijloqsuz_=@');\r\n                  context.beginPath();\r\n                  context.moveTo(x + this.segmentWidth + d, y);\r\n                  context.lineTo(x + this.digitWidth - this.segmentWidth - d, y);\r\n                  switch (this.cornerType) {\r\n                    case SegmentDisplay.SymmetricCorner:\r\n                      context.lineTo(x + this.digitWidth - s - d, y + s);\r\n                      context.lineTo(x + this.digitWidth - this.segmentWidth - d, y + this.segmentWidth);\r\n                      context.lineTo(x + this.segmentWidth + d, y + this.segmentWidth);\r\n                      context.lineTo(x + s + d, y + s);\r\n                      break;\r\n                    case SegmentDisplay.SquaredCorner:\r\n                      context.lineTo(x + this.digitWidth - s - e, y + s + e);\r\n                      context.lineTo(x + this.digitWidth - this.segmentWidth, y + this.segmentWidth);\r\n                      context.lineTo(x + this.segmentWidth, y + this.segmentWidth);\r\n                      context.lineTo(x + s + e, y + s + e);\r\n                      break;\r\n                    default:\r\n                      context.lineTo(x + this.digitWidth - this.segmentWidth + f, y + f + d);\r\n                      context.quadraticCurveTo(x + this.digitWidth - this.segmentWidth + g, y + this.segmentWidth, x + this.digitWidth - this.segmentWidth, y + this.segmentWidth);\r\n                      context.lineTo(x + this.segmentWidth, y + this.segmentWidth);\r\n                      context.quadraticCurveTo(x + this.segmentWidth - g, y + this.segmentWidth, x + this.segmentWidth - f, y + f + d);\r\n                      context.lineTo(x + this.segmentWidth - f, y + f + d);\r\n                  }\r\n                  context.fill();\r\n                }\r\n                \r\n                // draw segment e\r\n                x = xPos;\r\n                y = h + this.segmentWidth;\r\n                context.fillStyle = this.getSegmentColor(c, '0268abcdefhlnoprtu', '0268acefghjklmnopqruvw@');\r\n                context.beginPath();\r\n                context.moveTo(x, y + this.segmentWidth + d);\r\n                context.lineTo(x + s, y + s + d);\r\n                context.lineTo(x + this.segmentWidth, y + this.segmentWidth + d);\r\n                context.lineTo(x + this.segmentWidth, y + h + this.segmentWidth - d);\r\n                switch (this.cornerType) {\r\n                  case SegmentDisplay.SymmetricCorner:\r\n                    context.lineTo(x + s, y + h + this.segmentWidth + s - d);\r\n                    context.lineTo(x, y + h + this.segmentWidth - d);\r\n                    break;\r\n                  case SegmentDisplay.SquaredCorner:\r\n                    context.lineTo(x + s - e, y + h + this.segmentWidth + s - d + e);\r\n                    context.lineTo(x, y + h + this.segmentWidth);\r\n                    break;\r\n                  default:\r\n                    context.lineTo(x + this.segmentWidth - f - d, y + h + this.segmentWidth + f); \r\n                    context.quadraticCurveTo(x, y + h + this.segmentWidth + g, x, y + h + this.segmentWidth);\r\n                }\r\n                context.fill();\r\n                \r\n                // draw segment f\r\n                x = xPos;\r\n                y = 0;\r\n                context.fillStyle = this.getSegmentColor(c, '045689abcefhlpty', '045689acefghklmnopqrsuvwy@', '%');\r\n                context.beginPath();\r\n                context.moveTo(x + this.segmentWidth, y + this.segmentWidth + d);\r\n                context.lineTo(x + this.segmentWidth, y + h + this.segmentWidth - d);\r\n                context.lineTo(x + s, y + h + this.segmentWidth + s - d);\r\n                context.lineTo(x, y + h + this.segmentWidth - d);\r\n                switch (this.cornerType) {\r\n                  case SegmentDisplay.SymmetricCorner:\r\n                    context.lineTo(x, y + this.segmentWidth + d);\r\n                    context.lineTo(x + s, y + s + d);\r\n                    break;\r\n                  case SegmentDisplay.SquaredCorner:\r\n                    context.lineTo(x, y + this.segmentWidth);\r\n                    context.lineTo(x + s - e, y + s + e);\r\n                    break;\r\n                  default:\r\n                    context.lineTo(x, y + this.segmentWidth);\r\n                    context.quadraticCurveTo(x, y + this.segmentWidth - g, x + this.segmentWidth - f - d, y + this.segmentWidth - f); \r\n                    context.lineTo(x + this.segmentWidth - f - d, y + this.segmentWidth - f); \r\n                }\r\n                context.fill();\r\n\r\n                // draw segment g for 7 segments\r\n                if (this.segmentCount == 7) {\r\n                  x = xPos;\r\n                  y = (this.digitHeight - this.segmentWidth) / 2.0;\r\n                  context.fillStyle = this.getSegmentColor(c, '2345689abdefhnoprty-=');\r\n                  context.beginPath();\r\n                  context.moveTo(x + s + d, y + s);\r\n                  context.lineTo(x + this.segmentWidth + d, y);\r\n                  context.lineTo(x + this.digitWidth - this.segmentWidth - d, y);\r\n                  context.lineTo(x + this.digitWidth - s - d, y + s);\r\n                  context.lineTo(x + this.digitWidth - this.segmentWidth - d, y + this.segmentWidth);\r\n                  context.lineTo(x + this.segmentWidth + d, y + this.segmentWidth);\r\n                  context.fill();\r\n                }\r\n                      \r\n                // draw inner segments for the fourteen- and sixteen-segment-display\r\n                if (this.segmentCount != 7) {\r\n                  // draw segment g1\r\n                  x = xPos;\r\n                  y = (this.digitHeight - this.segmentWidth) / 2.0;\r\n                  context.fillStyle = this.getSegmentColor(c, null, '2345689aefhkprsy-+*=', '%');\r\n                  context.beginPath();\r\n                  context.moveTo(x + s + d, y + s);\r\n                  context.lineTo(x + this.segmentWidth + d, y);\r\n                  context.lineTo(x + t - d - s, y);\r\n                  context.lineTo(x + t - d, y + s);\r\n                  context.lineTo(x + t - d - s, y + this.segmentWidth);\r\n                  context.lineTo(x + this.segmentWidth + d, y + this.segmentWidth);\r\n                  context.fill();\r\n                  \r\n                  // draw segment g2\r\n                  x = xPos;\r\n                  y = (this.digitHeight - this.segmentWidth) / 2.0;\r\n                  context.fillStyle = this.getSegmentColor(c, null, '234689abefghprsy-+*=@', '%');\r\n                  context.beginPath();\r\n                  context.moveTo(x + t + d, y + s);\r\n                  context.lineTo(x + t + d + s, y);\r\n                  context.lineTo(x + this.digitWidth - this.segmentWidth - d, y);\r\n                  context.lineTo(x + this.digitWidth - s - d, y + s);\r\n                  context.lineTo(x + this.digitWidth - this.segmentWidth - d, y + this.segmentWidth);\r\n                  context.lineTo(x + t + d + s, y + this.segmentWidth);\r\n                  context.fill();\r\n                  \r\n                  // draw segment j \r\n                  x = xPos + t - s;\r\n                  y = 0;\r\n                  context.fillStyle = this.getSegmentColor(c, null, 'bdit+*', '%');\r\n                  context.beginPath();\r\n                  if (this.segmentCount == 14) {\r\n                    context.moveTo(x, y + this.segmentWidth + this.segmentDistance);\r\n                    context.lineTo(x + this.segmentWidth, y + this.segmentWidth + this.segmentDistance);\r\n                  } else {\r\n                    context.moveTo(x, y + this.segmentWidth + d);\r\n                    context.lineTo(x + s, y + s + d);\r\n                    context.lineTo(x + this.segmentWidth, y + this.segmentWidth + d);\r\n                  }\r\n                  context.lineTo(x + this.segmentWidth, y + h + this.segmentWidth - d);\r\n                  context.lineTo(x + s, y + h + this.segmentWidth + s - d);\r\n                  context.lineTo(x, y + h + this.segmentWidth - d);\r\n                  context.fill();\r\n                  \r\n                  // draw segment m\r\n                  x = xPos + t - s;\r\n                  y = this.digitHeight;\r\n                  context.fillStyle = this.getSegmentColor(c, null, 'bdity+*@', '%');\r\n                  context.beginPath();\r\n                  if (this.segmentCount == 14) {\r\n                    context.moveTo(x, y - this.segmentWidth - this.segmentDistance);\r\n                    context.lineTo(x + this.segmentWidth, y - this.segmentWidth - this.segmentDistance);\r\n                  } else {\r\n                    context.moveTo(x, y - this.segmentWidth - d);\r\n                    context.lineTo(x + s, y - s - d);\r\n                    context.lineTo(x + this.segmentWidth, y - this.segmentWidth - d);\r\n                  }\r\n                  context.lineTo(x + this.segmentWidth, y - h - this.segmentWidth + d);\r\n                  context.lineTo(x + s, y - h - this.segmentWidth - s + d);\r\n                  context.lineTo(x, y - h - this.segmentWidth + d);\r\n                  context.fill();\r\n                  \r\n                  // draw segment h\r\n                  x = xPos + this.segmentWidth;\r\n                  y = this.segmentWidth;\r\n                  context.fillStyle = this.getSegmentColor(c, null, 'mnx\\\\*');\r\n                  context.beginPath();\r\n                  context.moveTo(x + this.segmentDistance, y + this.segmentDistance);\r\n                  context.lineTo(x + this.segmentDistance + r, y + this.segmentDistance);\r\n                  context.lineTo(x + w - this.segmentDistance , y + h - this.segmentDistance - r);\r\n                  context.lineTo(x + w - this.segmentDistance , y + h - this.segmentDistance);\r\n                  context.lineTo(x + w - this.segmentDistance - r , y + h - this.segmentDistance);\r\n                  context.lineTo(x + this.segmentDistance, y + this.segmentDistance + r);\r\n                  context.fill();\r\n                  \r\n                  // draw segment k\r\n                  x = xPos + w + 2.0 * this.segmentWidth;\r\n                  y = this.segmentWidth;\r\n                  context.fillStyle = this.getSegmentColor(c, null, '0kmvxz/*', '%');\r\n                  context.beginPath();\r\n                  context.moveTo(x + w - this.segmentDistance, y + this.segmentDistance);\r\n                  context.lineTo(x + w - this.segmentDistance, y + this.segmentDistance + r);\r\n                  context.lineTo(x + this.segmentDistance + r, y + h - this.segmentDistance);\r\n                  context.lineTo(x + this.segmentDistance, y + h - this.segmentDistance);\r\n                  context.lineTo(x + this.segmentDistance, y + h - this.segmentDistance - r);\r\n                  context.lineTo(x + w - this.segmentDistance - r, y + this.segmentDistance);\r\n                  context.fill();\r\n                  \r\n                  // draw segment l\r\n                  x = xPos + w + 2.0 * this.segmentWidth;\r\n                  y = h + 2.0 * this.segmentWidth;\r\n                  context.fillStyle = this.getSegmentColor(c, null, '5knqrwx\\\\*');\r\n                  context.beginPath();\r\n                  context.moveTo(x + this.segmentDistance, y + this.segmentDistance);\r\n                  context.lineTo(x + this.segmentDistance + r, y + this.segmentDistance);\r\n                  context.lineTo(x + w - this.segmentDistance , y + h - this.segmentDistance - r);\r\n                  context.lineTo(x + w - this.segmentDistance , y + h - this.segmentDistance);\r\n                  context.lineTo(x + w - this.segmentDistance - r , y + h - this.segmentDistance);\r\n                  context.lineTo(x + this.segmentDistance, y + this.segmentDistance + r);\r\n                  context.fill();\r\n                  \r\n                  // draw segment n\r\n                  x = xPos + this.segmentWidth;\r\n                  y = h + 2.0 * this.segmentWidth;\r\n                  context.fillStyle = this.getSegmentColor(c, null, '0vwxz/*', '%');\r\n                  context.beginPath();\r\n                  context.moveTo(x + w - this.segmentDistance, y + this.segmentDistance);\r\n                  context.lineTo(x + w - this.segmentDistance, y + this.segmentDistance + r);\r\n                  context.lineTo(x + this.segmentDistance + r, y + h - this.segmentDistance);\r\n                  context.lineTo(x + this.segmentDistance, y + h - this.segmentDistance);\r\n                  context.lineTo(x + this.segmentDistance, y + h - this.segmentDistance - r);\r\n                  context.lineTo(x + w - this.segmentDistance - r, y + this.segmentDistance);\r\n                  context.fill();\r\n                }\r\n                \r\n                return this.digitDistance + this.digitWidth;\r\n                \r\n              case '.':\r\n                context.fillStyle = (c == '#') || (c == '.') ? this.colorOn : this.colorOff;\r\n                this.drawPoint(context, xPos, this.digitHeight - this.segmentWidth, this.segmentWidth);\r\n                return this.digitDistance + this.segmentWidth;\r\n                \r\n              case ':':\r\n                context.fillStyle = (c == '#') || (c == ':') ? this.colorOn : this.colorOff;\r\n                var y = (this.digitHeight - this.segmentWidth) / 2.0 - this.segmentWidth;\r\n                this.drawPoint(context, xPos, y, this.segmentWidth);\r\n                this.drawPoint(context, xPos, y + 2.0 * this.segmentWidth, this.segmentWidth);\r\n                return this.digitDistance + this.segmentWidth;\r\n                \r\n              default:\r\n                return this.digitDistance;    \r\n            }\r\n          };\r\n\r\n          SegmentDisplay.prototype.drawPoint = function(context, x1, y1, size) {\r\n            var x2 = x1 + size;\r\n            var y2 = y1 + size;\r\n            var d  = size / 4.0;\r\n            \r\n            context.beginPath();\r\n            context.moveTo(x2 - d, y1);\r\n            context.quadraticCurveTo(x2, y1, x2, y1 + d);\r\n            context.lineTo(x2, y2 - d);\r\n            context.quadraticCurveTo(x2, y2, x2 - d, y2);\r\n            context.lineTo(x1 + d, y2);\r\n            context.quadraticCurveTo(x1, y2, x1, y2 - d);\r\n            context.lineTo(x1, y1 + d);\r\n            context.quadraticCurveTo(x1, y1, x1 + d, y1);\r\n            context.fill();\r\n          }; \r\n\r\n          SegmentDisplay.prototype.getSegmentColor = function(c, charSet7, charSet14, charSet16) {\r\n            if (c == '#') {\r\n              return this.colorOn;\r\n            } else {\r\n              switch (this.segmentCount) {\r\n                case 7:  return (charSet7.indexOf(c) == -1) ? this.colorOff : this.colorOn;\r\n                case 14: return (charSet14.indexOf(c) == -1) ? this.colorOff : this.colorOn;\r\n                case 16: var pattern = charSet14 + (charSet16 === undefined ? '' : charSet16);\r\n                        return (pattern.indexOf(c) == -1) ? this.colorOff : this.colorOn;\r\n                default: return this.colorOff;\r\n              }\r\n            }\r\n          };\r\n\r\n\r\n          //segmant\r\n          var display = new SegmentDisplay(\"display\");\r\n          display.pattern         = \"###.##\";\r\n          display.segmentDistance = 0.5;\r\n          display.cornerType      = 3;\r\n          display.colorOn         = \"#24DD22\";\r\n          display.colorOff        = \"#041E1E\";\r\n          // display.setValue('12:34:56');\r\n          animate();\r\n\r\n          // window.setInterval('animate()', 100);\r\n      \r\n          function animate() {\r\n            var time    = new Date();\r\n            var hours   = time.getHours();\r\n            var minutes = time.getMinutes();\r\n            var seconds = time.getSeconds();\r\n            var value   = ((hours < 10) ? ' ' : '') + hours\r\n                        + ':' + ((minutes < 10) ? '0' : '') + minutes\r\n                        + ':' + ((seconds < 10) ? '0' : '') + seconds;\r\n            display.setValue(\"223.5\");\r\n          }\r\n\r\n          var display2 = new SegmentDisplay(\"display2\");\r\n          display2.pattern         = \"###.##\";\r\n          display2.segmentDistance = 0.5;\r\n          display2.cornerType      = 3;\r\n          display2.colorOn         = \"#ff0f0f\";\r\n          display2.colorOff        = \"#041E1E\";\r\n          animate2();\r\n\r\n          // window.setInterval('animate2()', 100);\r\n      \r\n          function animate2() {\r\n            var time    = new Date();\r\n            var hours   = time.getHours();\r\n            var minutes = time.getMinutes();\r\n            var seconds = time.getSeconds();\r\n            var value   = ((hours < 10) ? ' ' : '') + hours\r\n                        + ':' + ((minutes < 10) ? '0' : '') + minutes\r\n                        + ':' + ((seconds < 10) ? '0' : '') + seconds;\r\n            display2.setValue(\"923.6\");\r\n          }\r\n\r\n          var display3 = new SegmentDisplay(\"display3\");\r\n          display3.pattern         = \"###.##\";\r\n          display3.segmentDistance = 0.5;\r\n          display3.cornerType      = 3;\r\n          display3.colorOn         = \"#ff0f0f\";\r\n          display3.colorOff        = \"#041E1E\";\r\n          animate3();\r\n\r\n          // window.setInterval('animate3()', 100);\r\n      \r\n          function animate3() {\r\n            var time    = new Date();\r\n            var hours   = time.getHours();\r\n            var minutes = time.getMinutes();\r\n            var seconds = time.getSeconds();\r\n            var value   = ((hours < 10) ? ' ' : '') + hours\r\n                        + ':' + ((minutes < 10) ? '0' : '') + minutes\r\n                        + ':' + ((seconds < 10) ? '0' : '') + seconds;\r\n            display3.setValue(\"823.5\");\r\n          }\r\n\r\n          var display4 = new SegmentDisplay(\"display4\");\r\n          display4.pattern         = \"###.##\";\r\n          display4.segmentDistance = 0.5;\r\n          display4.cornerType      = 3;\r\n          display4.colorOn         = \"#24DD22\";\r\n          display4.colorOff        = \"#041E1E\";\r\n          animate4();\r\n\r\n          // window.setInterval('animate4()', 100);\r\n      \r\n          function animate4() {\r\n            var time    = new Date();\r\n            var hours   = time.getHours();\r\n            var minutes = time.getMinutes();\r\n            var seconds = time.getSeconds();\r\n            var value   = ((hours < 10) ? ' ' : '') + hours\r\n                        + ':' + ((minutes < 10) ? '0' : '') + minutes\r\n                        + ':' + ((seconds < 10) ? '0' : '') + seconds;\r\n            display4.setValue(\"523.2\");\r\n          }\r\n\r\n          // document.getElementsByClassName(\"numeric-input\").style =\r\n        },\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n/* .input {\r\n  width: 250px !important;\r\n}\r\n.numeric-input {\r\n  height: 150px !important;\r\n} */\r\n\r\n.svg {\r\n  cursor: pointer !important;\r\n}\r\n\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./show.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./show.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./show.vue?vue&type=template&id=d37b5956&scoped=true&\"\nimport script from \"./show.vue?vue&type=script&lang=js&\"\nexport * from \"./show.vue?vue&type=script&lang=js&\"\nimport style0 from \"./show.vue?vue&type=style&index=0&id=d37b5956&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"d37b5956\",\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./show.vue?vue&type=style&index=0&id=d37b5956&scoped=true&lang=css&\""],"sourceRoot":""}